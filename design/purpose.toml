# project purpose and definition documentation

[REQ-purpose]
text = '''
To create a top down tactical game that uses a finely grained planning system
to make a near-perfect-information non-cooperative game.

The model would be very similar to Frozen Synapse, agents with abilities in a
2d environment, with polygon walls and other obstacles, attempting to achieve
goals adversarially with unbounded planning time.

The key distinction would be that instead of having a "simultaneous turn"
model, which immediately puts the focus on guessing what the adversary will do
in the next 5 seconds, this game/engine would have a continuous/compact
resolution model.

Further distinctions include different base content like obstacle types, weapon
types, movement systems, etc.
There could even be customization in place of FS's concretely designed content,
simply to ensure that the player can make the game appropriately designed.
'''

[REQ-interface]
partof = 'REQ-purpose'
text = '''
Like most tactics/planning based games, interacting with the program will
primarily consist of constructing a connect-the-dots path on screen, with
commands interspersed, with frequent submission of the plan to see the result.

Like Frozen Synapse, and even Civilisation, plans shall go further into the
future than immediate actions, as this is a necessity when multitasking.

In order to facilitate efficient play, the program should accept hotkeys for
most actions, and as such on-screen UI can be minimal during early versions.
In the long term UI should exist for all available actions, as this makes most
game mechanics self-teaching.

Plans will consist of a sequence of navigation nodes, each of which contain a
sequence of action nodes.
Navigation nodes can be placed on either side of an impassable obstacle/wall,
corresponding to a plan to move in the shortest passable path from one node to
the other.

To ease mental processing, plans will be displayed on-screen in the form of a
series of line segments from the current position to the last nav node.
Some of the segments will have a filled circle at one end, to indicate that
they are not an intermediate step, but an explicit nav node.

The user shall select nodes on-screen to select them, which causes any action
nodes to be displayed on the side of the screen.

Additional hints may exist on screen to show the targets of various actions,
labelled "1" "2a" "2b" etc. to indicate which command in the action list it
corresponds to, with letters optionally indicating which field of the command
is being represented.

These hints should be connected to the current nav node with some kind of line, 
and should be hidden when something else is selected.
This is so that it is very clear the angle and location of each target based
action.

Commands should of course be added and deleted through the keyboard and through
the screen, with various quality of life features such as:
- inserting/deleting a nav node in the middle of a path
- inserting/deleting/rearranging actions within a nav node
- changing arguments of an action
- testing line-of-sight of a point from current nav node
- potentially other visualisation features such as shadows or path to mouse

Controls should also exist to start and stop local simulation, as well as
submitting the local simulation to a server (which may or may not be local)
A timeline visualisation should exist at the bottom of the screen much like in
animation software and somewhat like video playback, which shows the currently
submitted, and currently displayed points in time, as well as the point in time
at which the last scheduled command will finish.
'''

[REQ-server-old]
text = '''
[these notes are old and might not be strictly requirements]
The game shall consist of a simulation, i.e. a finite set of entities changing
their own state and the state of other entities within some rule set.

Writing a plan for your units shall simply translate into a sequence of entity
states, where each entity is one of your units.

A server, internal or external, shall perform three tasks on these state
sequences:
1. Validate + communicate invalid sequences
2. Communicate surprises
3. Resolve + communicate conflicts

Each entity shall have a specified owner (though that owner doesn't have to be
the same for the whole game, at the very least casualties will essentially have
no owner.)
The server will then collect entity state sequences from the clients associated
with each entity's owner, and perform the above tasks.
Some entities may be owned by an external client on the same device as the
server, which may be referred to as "the server's responsibility", but for the
purposes of this design, the server is specifically a software abstraction for
the responsibility of resolving entity state sequences.

While clients will use "commands" as an abstraction for valid sequences of
entity states, as well as for algorithms that automate things like pathfinding,
this concept will be deliberately separate from anything the server
understands, simply because the rules for validating entity states will be much
simpler than the translation from commands into entity states, and hence the
latter would provide little advantage for server development.

In the future an analogous distinction server-side might save on network usage, 
but this won't be considered for now.
'''

[REQ-server]
partof = 'REQ-purpose'
text = '''
It should also be possible to host servers, which can be connected to via TCP.
These servers coordinate games across multiple players, and must verify the
legality of each players moves, while also reporting the results of their moves
to everyone playing.
'''

[REQ-simulation]
partof = 'REQ-interface'
text = '''
One of the entities in the simulation described in [[REQ-server]], perhaps the
only entity, will be the unit.

The unit's states consist of a position, velocity, current weapon,
weapon target position, and current weapon use.

Given state1 and time1 and state2 at time2, the transformation to state2 is
valid if all of the following conditions are met:
state2.position = state1.position + (time2 - time1) * state1.velocity
state2.velocity.magnitude() <= state2.weapon_use.max_speed()
state2.weapon.is_valid_use(state2.weapon_use)
state1.weapon_use.can_transition_to(state2.weapon_use, time2 - time1)

all of the fields are numbers or vectors of some kind,
velocity.magnitude() takes the obvious euclidean definition
weapon_use.max_speed() is obviously also a number
the other boolean methods is_valid_use and can_transition_to are obviously
arbitrary and allow for a lot of possible weapon behaviours.

Weapon uses are intended to affect other entities in the simulation as well,
usually by either creating a projectile entity, or by directly killing another
unit.
Whether killing a unit is part of the respective entity state, or simply
deletes the entity, is not specified by the REQ.
If the effect that a unit has on another entity can't be inferred from a change
in the unit's state, then this will need to be accomodated somehow, either by
adding dummy state, or by declaring the changes to the other entities directly.
(the latter would not fit in with the current model in [[REQ-server]], but that
can be accomodated if necessary)
'''
